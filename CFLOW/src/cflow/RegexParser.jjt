options{	multi = true;	static = true;}PARSER_BEGIN(RegexParser)package cflow;public class RegexParser{}PARSER_END(RegexParser)SKIP :{   " " | "\r" | "\t"}TOKEN : /* OPERATORS */{< CHAR : (< LETTER > | < NUMBER >) >| < LETTER : ["a"-"z","A"-"Z"] >| < NUMBER: ["0"-"9"] >| < ANYTHING : "." >| < MULTIPLICITY : ( "?" | "+" | "*" | < SPECIFYOCURR1 > | < SPECIFYOCURR2 >) >| < SPECIFYOCURR1: ("{" (["0"-"9"])+"," ((["0"-"9"])*)?  "}") >| < SPECIFYOCURR2:  ("{" (["0"-"9"])+ "}") >| < BETWEEN:  (< LETTER > "-" < LETTER > | < NUMBER > "-" < NUMBER > ) > | < PIPE : "|" >| < NL : "\n" >| < CARET: "^" >| < LASTELEM: "$" >}SimpleNode check() #root : {Token t, t1;}{   [t = < CARET > {jjtThis.val = t.image;} #Begin(0)] RegExp() [ t1 = < LASTELEM > {jjtThis.val = t1.image;}  #End(0)]  < NL > {    return jjtThis;  }}void RegExp() #void : {}{	  RegExpVal()  [<PIPE> RegExp() { jjtThis.val = "|";} #OR(2)]}void RegExpVal() #void : {Token t1;}{	Value() [t1=< MULTIPLICITY > {jjtThis.val = t1.image;	if(t1.image.indexOf(",")!=-1)	{	   String[] result = t1.image.split(",");	   //remove brackets	   result[0] = result[0].replace("{", "");	   result[1] = result[1].replace("}", "");	   if(result[1].length() != 0)		{		  Integer left_side = Integer.parseInt(result[0]);		  Integer right_side = Integer.parseInt(result[1]);		  if(left_side > right_side)		  throw new Error("Error in multiplicity { A, B } where A is higher than B!");		}	}		}  #Mult(1)] [RegExpVal() #AND(2)]}void Value() #void : {Token t;} {	(t=< CHAR > {jjtThis.val = t.image;} #Char(0)	| t= < ANYTHING > {jjtThis.val = t.image;} #Any(0)	| "(" RegExp() ")"	| "[" Bracket() #Bracket(1) "]"	| "[^" BracketC() #BracketC(1) "]")	}void Bracket() #void : {Token t;}{	  BracketElements() [Bracket() #AND(2)]    }void BracketC() #void : { Token t;}{	 BracketElements() [BracketC() #AND(2)]    }void BracketElements() #BracketElems : {Token t1, t2;}{	( t1 = < CHAR > { jjtThis.val = t1.image; } 	  | t1 = < BETWEEN > { jjtThis.val = t1.image;		String[] result = t1.image.split("-");		if(result[0].charAt(0) > result[1].charAt(0))        		throw new Error("Range must be between A-z according to ascii code and follow its order.");	  })}