/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. RegexParser.jj */
/*@egen*/options{	             	static = true;}PARSER_BEGIN(RegexParser)package cflow;public class RegexParser/*@bgen(jjtree)*/implements RegexParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTRegexParserState jjtree = new JJTRegexParserState();

/*@egen*/}PARSER_END(RegexParser)SKIP :{   " " | "\r" | "\t"}TOKEN : /* OPERATORS */{< CHAR : (< LETTER > | < NUMBER >) >| < LETTER : ["a"-"z","A"-"Z"] >| < NUMBER: ["0"-"9"] >| < ANYTHING : "." >| < MULTIPLICITY : ( "?" | "+" | "*" | < SPECIFYOCURR1 > | < SPECIFYOCURR2 >) >| < SPECIFYOCURR1: ("{" (["0"-"9"])+"," ((["0"-"9"])*)?  "}") >| < SPECIFYOCURR2:  ("{" (["0"-"9"])+ "}") >| < BETWEEN:  (< LETTER > "-" < LETTER > | < NUMBER > "-" < NUMBER > ) > | < PIPE : "|" >| < NL : "\n" >| < CARET: "^" >| < LASTELEM: "$" >}SimpleNode check()       : {/*@bgen(jjtree) root */
                            ASTroot jjtn000 = new ASTroot(JJTROOT);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, t1;}{/*@bgen(jjtree) root */
   try {
/*@egen*/   [t = < CARET >/*@bgen(jjtree) #Begin( 0) */
                  {
                    ASTBegin jjtn001 = new ASTBegin(JJTBEGIN);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*//*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn001,  0);
                    jjtc001 = false;
                  }
/*@egen*/ {jjtn001.val = t.image;}/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  0);
                    }
                  }
/*@egen*/          ] RegExp() [ t1 = < LASTELEM >/*@bgen(jjtree) #End( 0) */
                                                                                   {
                                                                                     ASTEnd jjtn002 = new ASTEnd(JJTEND);
                                                                                     boolean jjtc002 = true;
                                                                                     jjtree.openNodeScope(jjtn002);
                                                                                   }
                                                                                   try {
/*@egen*//*@bgen(jjtree)*/
                                                                                   {
                                                                                     jjtree.closeNodeScope(jjtn002,  0);
                                                                                     jjtc002 = false;
                                                                                   }
/*@egen*/ {jjtn002.val = t1.image;}/*@bgen(jjtree)*/
                                                                                   } finally {
                                                                                     if (jjtc002) {
                                                                                       jjtree.closeNodeScope(jjtn002,  0);
                                                                                     }
                                                                                   }
/*@egen*/         ]  < NL >/*@bgen(jjtree)*/
                                                                                                                               {
                                                                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                 jjtc000 = false;
                                                                                                                               }
/*@egen*/ {    return jjtn000;  }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/}void RegExp()       : {}{	  RegExpVal()  [<PIPE> RegExp()/*@bgen(jjtree) #OR( 2) */
                                        {
                                          ASTOR jjtn001 = new ASTOR(JJTOR);
                                          boolean jjtc001 = true;
                                          jjtree.openNodeScope(jjtn001);
                                        }
                                        try {
/*@egen*//*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn001,  2);
                                          jjtc001 = false;
                                        }
/*@egen*/ { jjtn001.val = "|";}/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc001) {
                                            jjtree.closeNodeScope(jjtn001,  2);
                                          }
                                        }
/*@egen*/       ]}void RegExpVal()       : {Token t1;}{	Value() [t1=< MULTIPLICITY >/*@bgen(jjtree) #Mult( 1) */
                                     {
                                       ASTMult jjtn001 = new ASTMult(JJTMULT);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                     }
                                     try {
/*@egen*//*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn001,  1);
                                       jjtc001 = false;
                                     }
/*@egen*/ {jjtn001.val = t1.image;	if(t1.image.indexOf(",")!=-1)	{	   String[] result = t1.image.split(",");	   //remove brackets	   result[0] = result[0].replace("{", "");	   result[1] = result[1].replace("}", "");	   if(result[1].length() != 0)		{		  Integer left_side = Integer.parseInt(result[0]);		  Integer right_side = Integer.parseInt(result[1]);		  if(left_side > right_side)		  throw new Error("Error in multiplicity { A, B } where A is higher than B!");		}	}		}/*@bgen(jjtree)*/
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  1);
                                       }
                                     }
/*@egen*/          ] [/*@bgen(jjtree) #AND( 2) */
                      {
                        ASTAND jjtn002 = new ASTAND(JJTAND);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
                      }
                      try {
/*@egen*/RegExpVal()/*@bgen(jjtree)*/
                      } catch (Throwable jjte002) {
                        if (jjtc002) {
                          jjtree.clearNodeScope(jjtn002);
                          jjtc002 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte002 instanceof RuntimeException) {
                          throw (RuntimeException)jjte002;
                        }
                        if (jjte002 instanceof ParseException) {
                          throw (ParseException)jjte002;
                        }
                        throw (Error)jjte002;
                      } finally {
                        if (jjtc002) {
                          jjtree.closeNodeScope(jjtn002,  2);
                        }
                      }
/*@egen*/        ]}void Value()       : {Token t;} {	(t=< CHAR >/*@bgen(jjtree) #Char( 0) */
                    {
                      ASTChar jjtn001 = new ASTChar(JJTCHAR);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                    }
                    try {
/*@egen*//*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn001,  0);
                      jjtc001 = false;
                    }
/*@egen*/ {jjtn001.val = t.image;}/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  0);
                      }
                    }
/*@egen*/         	| t= < ANYTHING >/*@bgen(jjtree) #Any( 0) */
                          {
                            ASTAny jjtn002 = new ASTAny(JJTANY);
                            boolean jjtc002 = true;
                            jjtree.openNodeScope(jjtn002);
                          }
                          try {
/*@egen*//*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn002,  0);
                            jjtc002 = false;
                          }
/*@egen*/ {jjtn002.val = t.image;}/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc002) {
                              jjtree.closeNodeScope(jjtn002,  0);
                            }
                          }
/*@egen*/        	| "(" RegExp() ")"	| "["/*@bgen(jjtree) #Bracket( 1) */
              {
                ASTBracket jjtn003 = new ASTBracket(JJTBRACKET);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
              }
              try {
/*@egen*/ Bracket()/*@bgen(jjtree)*/
              } catch (Throwable jjte003) {
                if (jjtc003) {
                  jjtree.clearNodeScope(jjtn003);
                  jjtc003 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte003 instanceof RuntimeException) {
                  throw (RuntimeException)jjte003;
                }
                if (jjte003 instanceof ParseException) {
                  throw (ParseException)jjte003;
                }
                throw (Error)jjte003;
              } finally {
                if (jjtc003) {
                  jjtree.closeNodeScope(jjtn003,  1);
                }
              }
/*@egen*/             "]"	| "[^"/*@bgen(jjtree) #BracketC( 1) */
               {
                 ASTBracketC jjtn004 = new ASTBracketC(JJTBRACKETC);
                 boolean jjtc004 = true;
                 jjtree.openNodeScope(jjtn004);
               }
               try {
/*@egen*/ BracketC()/*@bgen(jjtree)*/
               } catch (Throwable jjte004) {
                 if (jjtc004) {
                   jjtree.clearNodeScope(jjtn004);
                   jjtc004 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte004 instanceof RuntimeException) {
                   throw (RuntimeException)jjte004;
                 }
                 if (jjte004 instanceof ParseException) {
                   throw (ParseException)jjte004;
                 }
                 throw (Error)jjte004;
               } finally {
                 if (jjtc004) {
                   jjtree.closeNodeScope(jjtn004,  1);
                 }
               }
/*@egen*/              "]")	}void Bracket()       : {Token t;}{	  BracketElements() [/*@bgen(jjtree) #AND( 2) */
                             {
                               ASTAND jjtn001 = new ASTAND(JJTAND);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                             }
                             try {
/*@egen*/Bracket()/*@bgen(jjtree)*/
                             } catch (Throwable jjte001) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte001 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte001;
                               }
                               if (jjte001 instanceof ParseException) {
                                 throw (ParseException)jjte001;
                               }
                               throw (Error)jjte001;
                             } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  2);
                               }
                             }
/*@egen*/        ]    }void BracketC()       : { Token t;}{	 BracketElements() [/*@bgen(jjtree) #AND( 2) */
                            {
                              ASTAND jjtn001 = new ASTAND(JJTAND);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                            }
                            try {
/*@egen*/BracketC()/*@bgen(jjtree)*/
                            } catch (Throwable jjte001) {
                              if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                throw (RuntimeException)jjte001;
                              }
                              if (jjte001 instanceof ParseException) {
                                throw (ParseException)jjte001;
                              }
                              throw (Error)jjte001;
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  2);
                              }
                            }
/*@egen*/        ]    }void BracketElements()               : {/*@bgen(jjtree) BracketElems */
                                        ASTBracketElems jjtn000 = new ASTBracketElems(JJTBRACKETELEMS);
                                        boolean jjtc000 = true;
                                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}{/*@bgen(jjtree) BracketElems */
        try {
/*@egen*/	( t1 = < CHAR >/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ { jjtn000.val = t1.image; } 	  | t1 = < BETWEEN >/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ { jjtn000.val = t1.image;		String[] result = t1.image.split("-");		if(result[0].charAt(0) > result[1].charAt(0))        		throw new Error("Range must be between A-z according to ascii code and follow its order.");	  })/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}