/* Generated By:JJTree&JavaCC: Do not edit this line. RegexParser.java */
package cflow;

public class RegexParser/*@bgen(jjtree)*/implements RegexParserTreeConstants, RegexParserConstants {/*@bgen(jjtree)*/
  protected static JJTRegexParserState jjtree = new JJTRegexParserState();

  static final public SimpleNode check() throws ParseException {
                            /*@bgen(jjtree) root */
                            ASTroot jjtn000 = new ASTroot(JJTROOT);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t, t1;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CARET:
        t = jj_consume_token(CARET);
                    ASTBegin jjtn001 = new ASTBegin(JJTBEGIN);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
        try {
                    jjtree.closeNodeScope(jjtn001,  0);
                    jjtc001 = false;
                   jjtn001.val = t.image;
        } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  0);
                    }
        }
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      RegExp();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LASTELEM:
        t1 = jj_consume_token(LASTELEM);
                                                                                     ASTEnd jjtn002 = new ASTEnd(JJTEND);
                                                                                     boolean jjtc002 = true;
                                                                                     jjtree.openNodeScope(jjtn002);
        try {
                                                                                     jjtree.closeNodeScope(jjtn002,  0);
                                                                                     jjtc002 = false;
                                                                                    jjtn002.val = t1.image;
        } finally {
                                                                                     if (jjtc002) {
                                                                                       jjtree.closeNodeScope(jjtn002,  0);
                                                                                     }
        }
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(NL);
                                                                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                 jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void RegExp() throws ParseException {
    RegExpVal();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PIPE:
      jj_consume_token(PIPE);
      RegExp();
                                          ASTOR jjtn001 = new ASTOR(JJTOR);
                                          boolean jjtc001 = true;
                                          jjtree.openNodeScope(jjtn001);
      try {
                                          jjtree.closeNodeScope(jjtn001,  2);
                                          jjtc001 = false;
                                          jjtn001.val = "|";
      } finally {
                                          if (jjtc001) {
                                            jjtree.closeNodeScope(jjtn001,  2);
                                          }
      }
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

  static final public void RegExpVal() throws ParseException {
                          Token t1;
    Value();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULTIPLICITY:
      t1 = jj_consume_token(MULTIPLICITY);
                                       ASTMult jjtn001 = new ASTMult(JJTMULT);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
      try {
                                       jjtree.closeNodeScope(jjtn001,  1);
                                       jjtc001 = false;
                                      jjtn001.val = t1.image;
        if(t1.image.indexOf(",")!=-1)
        {
           String[] result = t1.image.split(",");
           //remove brackets
           result[0] = result[0].replace("{", "");
           result[1] = result[1].replace("}", "");

           if(result[1].length() != 0)
                {
                  Integer left_side = Integer.parseInt(result[0]);
                  Integer right_side = Integer.parseInt(result[1]);

                  if(left_side > right_side)
                  {if (true) throw new Error("Error in multiplicity { A, B } where A is higher than B!");}
                }
        }
      } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  1);
                                       }
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHAR:
    case ANYTHING:
    case 16:
    case 18:
    case 20:
                        ASTAND jjtn002 = new ASTAND(JJTAND);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
      try {
        RegExpVal();
      } catch (Throwable jjte002) {
                        if (jjtc002) {
                          jjtree.clearNodeScope(jjtn002);
                          jjtc002 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte002 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte002;}
                        }
                        if (jjte002 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte002;}
                        }
                        {if (true) throw (Error)jjte002;}
      } finally {
                        if (jjtc002) {
                          jjtree.closeNodeScope(jjtn002,  2);
                        }
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
  }

  static final public void Value() throws ParseException {
                      Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHAR:
      t = jj_consume_token(CHAR);
                      ASTChar jjtn001 = new ASTChar(JJTCHAR);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
      try {
                      jjtree.closeNodeScope(jjtn001,  0);
                      jjtc001 = false;
                     jjtn001.val = t.image;
      } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  0);
                      }
      }
      break;
    case ANYTHING:
      t = jj_consume_token(ANYTHING);
                            ASTAny jjtn002 = new ASTAny(JJTANY);
                            boolean jjtc002 = true;
                            jjtree.openNodeScope(jjtn002);
      try {
                            jjtree.closeNodeScope(jjtn002,  0);
                            jjtc002 = false;
                           jjtn002.val = t.image;
      } finally {
                            if (jjtc002) {
                              jjtree.closeNodeScope(jjtn002,  0);
                            }
      }
      break;
    case 16:
      jj_consume_token(16);
      RegExp();
      jj_consume_token(17);
      break;
    case 18:
      jj_consume_token(18);
                ASTBracket jjtn003 = new ASTBracket(JJTBRACKET);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
      try {
        Bracket();
      } catch (Throwable jjte003) {
                if (jjtc003) {
                  jjtree.clearNodeScope(jjtn003);
                  jjtc003 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte003 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte003;}
                }
                if (jjte003 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte003;}
                }
                {if (true) throw (Error)jjte003;}
      } finally {
                if (jjtc003) {
                  jjtree.closeNodeScope(jjtn003,  1);
                }
      }
      jj_consume_token(19);
      break;
    case 20:
      jj_consume_token(20);
                 ASTBracketC jjtn004 = new ASTBracketC(JJTBRACKETC);
                 boolean jjtc004 = true;
                 jjtree.openNodeScope(jjtn004);
      try {
        BracketC();
      } catch (Throwable jjte004) {
                 if (jjtc004) {
                   jjtree.clearNodeScope(jjtn004);
                   jjtc004 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte004 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte004;}
                 }
                 if (jjte004 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte004;}
                 }
                 {if (true) throw (Error)jjte004;}
      } finally {
                 if (jjtc004) {
                   jjtree.closeNodeScope(jjtn004,  1);
                 }
      }
      jj_consume_token(19);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Bracket() throws ParseException {
                        Token t;
    BracketElements();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHAR:
    case BETWEEN:
                               ASTAND jjtn001 = new ASTAND(JJTAND);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
      try {
        Bracket();
      } catch (Throwable jjte001) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte001 instanceof RuntimeException) {
                                 {if (true) throw (RuntimeException)jjte001;}
                               }
                               if (jjte001 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte001;}
                               }
                               {if (true) throw (Error)jjte001;}
      } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  2);
                               }
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  static final public void BracketC() throws ParseException {
                          Token t;
    BracketElements();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHAR:
    case BETWEEN:
                              ASTAND jjtn001 = new ASTAND(JJTAND);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
      try {
        BracketC();
      } catch (Throwable jjte001) {
                              if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte001;}
                              }
                              if (jjte001 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte001;}
                              }
                              {if (true) throw (Error)jjte001;}
      } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  2);
                              }
      }
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  static final public void BracketElements() throws ParseException {
                                        /*@bgen(jjtree) BracketElems */
                                        ASTBracketElems jjtn000 = new ASTBracketElems(JJTBRACKETELEMS);
                                        boolean jjtc000 = true;
                                        jjtree.openNodeScope(jjtn000);Token t1, t2;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHAR:
        t1 = jj_consume_token(CHAR);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          jjtn000.val = t1.image;
        break;
      case BETWEEN:
        t1 = jj_consume_token(BETWEEN);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                               jjtn000.val = t1.image;
                String[] result = t1.image.split("-");

                if(result[0].charAt(0) > result[1].charAt(0))
                {if (true) throw new Error("Range must be between A-z according to ascii code and follow its order.");}
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public RegexParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000,0x8000,0x1000,0x100,0x150090,0x150090,0x810,0x810,0x810,};
   }

  /** Constructor with InputStream. */
  public RegexParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RegexParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RegexParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public RegexParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RegexParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public RegexParser(RegexParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RegexParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[21];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 21; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

                         }
